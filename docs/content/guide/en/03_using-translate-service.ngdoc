@ngdoc overview
@name Using $translate service
@description

# Using $translate service

`angular-translate` provides several ways to translate the contents of your app.
One way is to use the provided `$translate` service directly. You actually
wouldn't use this approach, because you don't want to bind your apps
controllers and services too hard to your translated content. However it turned
out that there are indeed cases where you need to translate contents with
`$translate` service.

Just imagine the case, where you want to translate the content of your HTML
documents `<title>` tag. The `<title>` will never ever be inside of your `ng-app`
directive, which means it is always outside of an Angular world. So, to achieve
this, you actually have to manipulate your apps title once your app is running
through controller or service logic.

## General usage
This is where `$translate` service comes in. Using `$translate` service is very
easy. First of all, you have to inject it per dependency injection (like every
service you want to use within your Angular code). Let's say we want to extend
the app we started building in [Getting Started](#/guide/02_getting-started).

Our code would look something like this:

<pre>
app.controller('Ctrl', ['$translate', function ($translate) {

}]);
</pre>

Now to translate your contents with `$translate` service, all you have to do is
to pass a translation ID which was registered with `$translateProvider` before
and it'll return the concrete translation of that translation ID. We also inject
`$scope` within our controller to expose to our view layer the translated values:

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $scope.headline = $translate('HEADLINE');
  $scope.paragraph = $translate('PARAGRAPH');
  $scope.namespaced_paragraph = $translate('NAMESPACE.PARAGRAPH');
}]);
</pre>
**Note:** Namespaced translations are accessed as JSON properties, see 'NAMESPACE.PARAGRAPH'`.

That's all. Now when you think about translating the contents of a `<title>` you
can do so within your controller.

## Things to keep in mind
Please keep in mind that the usage of the `$translate` service doesn't provide a two-way
data binding default! When using `$translate` service it works synchronously, which means
it returns the translation for the given translation id, if it exists. If it doesn't
exist it'll probably just return the translation id.

Now, for the case you're using an asynchronous loader, you might be a bit confused why
the `$translate` service always returns the given translation id instead of the
translation you're looking for. This is because the translation id doesn't exist in the
moment `$translate` service searches for it because translation tables are loaded
asynchronously. To get around this, you have to somehow tell `$translate` service to
be called, once the translation table, that is requested by asynchronous loader, is
available.

You can do that by simply wrapping your `$translate` call into a `$translateChangeSucces`
callback, which gets fired every time a translation change was successful. Because an
asynchronous loader only requests a table when a language change is about to happen.
Once its loaded, and the translate change happened, the event gets fired. Here's how
it could look like:

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $scope.$on('$translateChangeSuccess', function () {
    $scope.headline = $translate('HEADLINE');
  });
}]);
</pre>

Here's a working sample:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider.translations(translations);
      }]);

      app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
        // expose translation via `$translate` service
        $scope.headline = $translate('HEADLINE');
        $scope.paragraph = $translate('PARAGRAPH');
        $scope.namespaced_paragraph = $translate('NAMESPACE.PARAGRAPH');
      }]);
    </script>
    <div ng-controller="Ctrl">
      <h1>{{headline}}</h1>
      <p>{{paragraph}}</p>
      <p>{{namespaced_paragraph}}</p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
